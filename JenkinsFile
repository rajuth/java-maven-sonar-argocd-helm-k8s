pipeline {
 environment {

        DOCKER_IMAGE = "rajuthtoa/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        DOCKERHUB_CREDENTIALS = credentials('docker-id')
	GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s"
        GIT_USER_NAME = "rajuth"
      }
  agent {
    docker {
  
      image 'rajuthtoa/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }

    
  }
  stages {
    stage('Checkout') {
      steps {
        
       checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rajuth/java-maven-sonar-argocd-helm-k8s.git']]])
       
      }
    }
      stage('Build and Test') {
      steps {
      
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
      //  stage('Static Code Analysis') {
      //environment {
    //    SONAR_URL = "http://192.168.56.113:9000"
     // }
      //steps {
    //    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
     //     sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
      //  }
     // }
    //}
        stage('Build Image') {
           
      steps {

        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} . '
            //def dockerImage = docker.image("${DOCKER_IMAGE}")
            //docker.withRegistry('https://hub.docker.com', "docker-id") {
            //    dockerImage.push()
            }
        }
      }
      		stage('Login && push image') {


			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin && docker push ${DOCKER_IMAGE}'
			}
		}
		stage('remove local image, log out from docker ') {
		    steps {
		        sh 'docker rmi ${DOCKER_IMAGE}  && docker logout'
		    }
		}
		 stage('Update Deployment File') {

        steps {
            withCredentials([string(credentialsId: 'git-id', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "thota.raju4@yahoo.com"
                    git config user.name "rajuth"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "19s/:[0-9]*$/:${BUILD_NUMBER}/"  spring-boot-app-manifests/deployment.yml
                    pwd && ls
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
       
    }
 }
 
